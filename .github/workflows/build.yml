name: Build Modules

on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true
  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            [ "$UPDATE_CFG" ] && echo "$UPDATE_CFG" > config.toml
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "NEXT_VER_CODE=$(( $(gh release list -L 1 | awk -F '\t' '{print $3}') + 1))" >> $GITHUB_OUTPUT

      - name: Build modules/APKs
        run: ./build.sh config.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: $(DELIM="$(openssl rand -hex 8)"; echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"; cat build.md >> "$GITHUB_OUTPUT"; echo "${DELIM}" >> "$GITHUB_OUTPUT")
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ReVanced/ReX
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          cp -f build.md build.tmp

          get_update_json() {
            echo "{\"version\": \"$1\", \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}, \"zipUrl\": \"$2\", \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build.md\"}"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson) && { UPDATE_JSON="${UPDATE_JSON##*/}"; VER=$(echo "$ZIP_S" | grep version=); VER="${VER##*=}"; DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"; get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"; }
          done
          cd ..
          find . -name "*-update.json" | grep . || : >dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Report to Telegram
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
        if: env.TG_TOKEN != null
        run: |
          cd build || { echo "build folder not found"; exit 1; }

          TG_CHAT="@rex_magisk"
          NL=$'\n'
          APKS=""
          MODULES=""

          for OUTPUT in *; do
            DL_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            [[ $OUTPUT = *.apk ]] && APKS+="ðŸ“¦[${OUTPUT}](${DL_URL})$NL" || [[ $OUTPUT = *.zip ]] && MODULES+="ðŸ“¦[${OUTPUT}](${DL_URL})$NL"
          done

          MODULES=${MODULES%$NL}
          APKS=${APKS%$NL}

          BODY=$(sed 's/^\* \*\*/â†ª \*\*/g; s/^\* `/â†ª \*\*/g; s/`/\*/g; s/^\* /\â†ª/g; s/\*\*/\*/g; s/###//g; s/^- /â†ª /g; /^==/d;' ../build.md)

          MSG="*New build!*${NL}${NL}${BODY}${NL}*â–¼ Download Links:*${NL}Modules:${NL}${MODULES}${NL}APKs:${NL}${APKS}"

          MSG=${MSG:0:4096}

          curl -X POST --data-urlencode "parse_mode=Markdown" --data-urlencode "disable_web_page_preview=true" --data-urlencode "text=${MSG}" --data-urlencode "chat_id=${TG_CHAT}" "https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
